<?php

namespace ProcessWire;

class ProcessWireMailBrevo extends Process
{
    const MYCLASS = 'WireMailBrevo';
    const MIN_PHP = '7.2.0';
    const PAGE_NAME = 'wiremail-brevo';


    public static function getModuleInfo()
    {
        return [
            'title'       => 'WireMail for Brevo',
            'author'      => 'Timothy de Vos based on the work of Netcarver & Pete of Nifty Solutions',
            'summary'     => 'Allows Processwire to send transactional email via Brevo',
            'href'        => 'https://brevo.com',
            'version'     => '0.0.3',
            'permission' => 'wiremail-brevo',
            'autoload'    => true,
            'singular'    => false,
            'permanent'   => false,
            'requires'    => [
                'ProcessWire>3.0.33',
                'PHP>=' . self::MIN_PHP,
            ],
        ];
    }

    /**
     * @var ProcessWire|\ProcessWire\ProcessWire
     *
     */
    protected $wire;

    public function ___execute()
    {
        $form = $this->___buildviewLogs();
        return $form->render();
    }

    public function ___buildviewLogs()
    {

        $form = $this->modules->get('InputfieldForm');
        $field = $this->modules->get('InputfieldMarkup');
        $field->label = 'Email logs';
        $field->value = $this->renderLogs();
        $field->columnWidth = 100;
        $form->add($field);

        return $form;
    }

    private function renderLogs()
    {
        $out = '';
        $class = '';
        $empty = true; // check if there are subscriptions to show
        $tag = $_SERVER['SERVER_NAME'];
        $limit = 20;
        $offset = 0;
        $current_page = 1;
        $admin_url = $this->config->urls->admin;

        if ($this->wire('input')->page) {
            $current_page = wire()->sanitizer->int($this->wire('input')->page);
            if ($current_page > 1) {
                $offset = ($current_page - 1) * $limit;
            }
        }
        $data = $this->modules('wireMailBrevo')->getServerSendLogs($tag, $limit, $offset);

        // Initialize the markup table
        $table = $this->modules->get('MarkupAdminDataTable');
        // $table->setSortable(false); // sorting is done on the client side so we disable it to prevent misunderstandings
        $table->setEncodeEntities(false);
        $table->headerRow(['Event', 'Date', 'Subject', 'From', 'To', 'Template id']);
        $table->addClass('WireMailBrevoTable'); // ooks ugly imho but stays here to show it could be done

        // check if api is returning events
        if (!isset($data->events)) {
            $out .= "<p>No data available at the moment. <a href='{$admin_url}module/edit?name=WireMailBrevo&collapse_info=1'>Check if the API-key is set.</a></p>";
        } else {

            if (isset($data->events) && count($data->events)) {
                // Iterate through data
                foreach ($data->events as $log) {

                    $empty = false; // table is not empty

                    // Given timestamp
                    $timestamp = $log->date;

                    // Convert to DateTime object
                    $date = new \DateTime($timestamp);

                    // Format the date as per your requirement
                    $readable_time = $date->format('d-m-Y | H:i:s');

                    switch ($log->event) {
                        case 'requests':
                            $log->event = 'Sent';
                            break;

                        case 'loadedByProxy':
                            $log->event = 'Loaded by proxy';
                            break;

                        case 'clicks':
                            $log->event = 'Clicked';
                            break;

                        default:
                            # code...
                            break;
                    }

                    $event_label =  "label-" . strtolower(wire()->sanitizer->name($log->event, true, 128, '-'));
                    $table->row(
                        [
                            "<span class='label $event_label'>$log->event</span>",
                            '<span style="display:none">' . $log->date . '</span>' . $readable_time,
                            wire()->sanitizer->entities($log->subject),
                            wire()->sanitizer->entities($log->from),
                            wire()->sanitizer->entities($log->email),
                            isset($log->templateId) ? $log->templateId : '',



                        ],
                        array('class' => $class)
                    );
                }
            }
            if ($empty) {
                $out .= "<p>Looks like our email log is feeling a bit lonely. Let's give it some company!</p>";
            } else {
                $pagination = '';
                $total_events = count($data->events);
                $next_page = $total_events == $limit ? true : false;
                $currentUrl = $this->wire('page')->url;

                if ($total_events > 0) {
                    $pagination .= '<ul class="uk-pagination MarkupPagerNav">';
                    // Previous page
                    $previous_page = $current_page > 1 ? true : false;
                    if ($previous_page) {
                        $pagination .= '<li aria-label="Previous page" class="MarkupPagerNavPrev MarkupPagerNavFirst"><a href="' . $currentUrl . '?page=' . $previous_page . '"><span><i class="fa fa-angle-left"></i></span></a></li>';
                    }
                    // Next page
                    if ($next_page) {
                        $next_page = $current_page + 1;
                        $pagination .= '<li aria-label="Next page" class="MarkupPagerNavNext MarkupPagerNavLast"><a href="' . $currentUrl . '?page=' . $next_page . '"><span><i class="fa fa-angle-right"></i></span></a></li>';
                    }

                    $pagination .= '</ul>';
                }

                // echo $out;
                $out .= $table->render();
                $out .= $pagination;

                // $m->attr('value', $pagination . $t->render() . $pagination); // wrap our table with pagination            $out .= $table->render();
            }
        }
        return $out;
    }

    public function ___install()
    {
        // create menu builder page and permission
        $p = $this->wire('pages')->get('template=admin, name=' . self::PAGE_NAME);
        if (!$p->id) {
            $page = new Page();
            $page->template = 'admin';
            $page->parent = $this->wire('pages')->get($this->config->adminRootPageID);
            $page->title = 'Transactional mail';
            $page->name = self::PAGE_NAME;
            $page->process = $this;
            $page->save();

            // tell the user we created this page
            $this->message($this->_('Created Page: ') . $page->path);

            // create version-control permission
            $permission = $this->permissions->get("wiremail-brevo");
            if (!$permission->id) {
                $permission = new Permission();
                $permission->name = "wiremail-brevo";
                $permission->title = $this->_("Access wiremail-brevo");
                $permission->save();
                $this->message("Created Permission: {$permission->name}");
            }
        }
    }

    public function ___uninstall()
    {
        $moduleID = $this->wire('modules')->getModuleID($this);
        $page = $this->wire('pages')->get("template=admin, process=$moduleID, name=" . self::PAGE_NAME);
        if ($page->id) {
            // if we found the page, let the user know and delete it
            $this->message($this->_('Deleted Page: ') . $page->path);
            // recursively delete the Mollie Admin page
            $page->delete(true);

            // delete version-control permission
            $permission = $this->permissions->get("wiremail-brevo");
            if ($permission->id) {
                $permission->delete();
                $this->message("Deleted Permission: {$permission->name}");
            }
        }
    }
}
